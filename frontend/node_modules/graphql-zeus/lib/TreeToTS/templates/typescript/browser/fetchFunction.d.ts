declare const _default: "\nconst handleFetchResponse = (\n  response: Parameters<Extract<Parameters<ReturnType<typeof fetch>['then']>[0], Function>>[0]\n): Promise<GraphQLResponse> => {\n  if (!response.ok) {\n    return new Promise((_, reject) => {\n      response.text().then(text => {\n        try { reject(JSON.parse(text)); }\n        catch (err) { reject(text); }\n      }).catch(reject);\n    });\n  }\n  return response.json();\n};\n\nexport const apiFetch = (options: fetchOptions) => (query: string, variables: Record<string, any> = {}) => {\n    let fetchFunction = fetch;\n    let queryString = query;\n    let fetchOptions = options[1] || {};\n    if (fetchOptions.method && fetchOptions.method === 'GET') {\n      queryString = encodeURIComponent(query);\n      return fetchFunction(`${options[0]}?query=${queryString}`, fetchOptions)\n        .then(handleFetchResponse)\n        .then((response: GraphQLResponse) => {\n          if (response.errors) {\n            throw new GraphQLError(response);\n          }\n          return response.data;\n        });\n    }\n    return fetchFunction(`${options[0]}`, {\n      body: JSON.stringify({ query: queryString, variables }),\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      ...fetchOptions\n    })\n      .then(handleFetchResponse)\n      .then((response: GraphQLResponse) => {\n        if (response.errors) {\n          throw new GraphQLError(response);\n        }\n        return response.data;\n      });\n  };\n  ";
export default _default;
