"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeToGraphQL = void 0;
const Models_1 = require("../Models");
const TemplateUtils_1 = require("./templates/TemplateUtils");
class TreeToGraphQL {
    static parse(parserTree) {
        const joinDefinitions = (...defintions) => defintions.join('\n\n');
        const alldefs = parserTree.nodes.map((a) => TemplateUtils_1.TemplateUtils.resolverForConnection(a));
        const schemaOperations = {
            [Models_1.OperationType.query]: null,
            [Models_1.OperationType.mutation]: null,
            [Models_1.OperationType.subscription]: null,
        };
        parserTree.nodes.forEach((n) => {
            const { operations } = n.type;
            if (operations && operations.length > 0) {
                if (operations.find((o) => o === Models_1.OperationType.query)) {
                    schemaOperations[Models_1.OperationType.query] = n.name;
                }
                if (operations.find((o) => o === Models_1.OperationType.mutation)) {
                    schemaOperations[Models_1.OperationType.mutation] = n.name;
                }
                if (operations.find((o) => o === Models_1.OperationType.subscription)) {
                    schemaOperations[Models_1.OperationType.subscription] = n.name;
                }
            }
        });
        const resolvedOperations = Object.keys(schemaOperations)
            .filter((k) => schemaOperations[k])
            .map((k) => `\t${k}: ${schemaOperations[k]}`)
            .join(',\n');
        return joinDefinitions(...alldefs)
            .concat('\n')
            .concat(schemaOperations[Models_1.OperationType.query] ? `schema{\n${resolvedOperations}\n}` : '');
    }
}
exports.TreeToGraphQL = TreeToGraphQL;
