"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TemplateUtils = void 0;
const Models_1 = require("../../Models");
const ArgumentTemplate_1 = require("./ArgumentTemplate");
const CommentTemplate_1 = require("./CommentTemplate");
const DirectiveTemplate_1 = require("./DirectiveTemplate");
const EnumValueDefinitionTemplate_1 = require("./EnumValueDefinitionTemplate");
const ExtendTemplate_1 = require("./ExtendTemplate");
const FieldTemplate_1 = require("./FieldTemplate");
const InputValueTemplate_1 = require("./InputValueTemplate");
const TypeDefinitionsTemplates_1 = require("./TypeDefinitionsTemplates");
const UnionMemberTemplate_1 = require("./UnionMemberTemplate");
const ValueTemplate_1 = require("./ValueTemplate");
const dedent = new RegExp('\n([\t ]*)', 'gm');
class TemplateUtils {
}
exports.TemplateUtils = TemplateUtils;
TemplateUtils.isArray = (f, type) => f.type.options && f.type.options.find((o) => o === Models_1.Options.array) ? `[${type}]` : type;
TemplateUtils.isRequired = (f, type) => f.type.options && f.type.options.find((o) => o === Models_1.Options.required) ? `${type}!` : type;
TemplateUtils.isArrayRequired = (f, type) => f.type.options &&
    f.type.options.find((o) => o === Models_1.Options.arrayRequired) &&
    f.type.options.find((o) => o === Models_1.Options.array)
    ? `${type}!`
    : type;
TemplateUtils.resolveType = (f) => TemplateUtils.isArrayRequired(f, TemplateUtils.isArray(f, TemplateUtils.isRequired(f, f.type.name)));
TemplateUtils.descriptionResolver = (description, prefix = 0) => {
    if (description) {
        const indent = '\t'.repeat(prefix);
        const removedIndents = `${description.replace(/^([\t ]*)/g, indent).replace(dedent, `\n${indent}`)}`;
        const d = `${indent}"""\n${removedIndents}\n${indent}"""\n`;
        return d;
    }
    return '';
};
TemplateUtils.resolveImplements = (interfaces) => interfaces && interfaces.length ? ` implements ${interfaces.join(' & ')}` : '';
TemplateUtils.resolveDirectives = (directives) => directives && directives.length
    ? ` ${directives.map((d) => TemplateUtils.resolverForConnection(d)).join(' ')}`
    : '';
TemplateUtils.resolverForConnection = (f, prefix = 0) => {
    if (f.data) {
        const { type = '' } = f.data;
        if (type === Models_1.TypeDefinition.UnionTypeDefinition) {
            return TypeDefinitionsTemplates_1.TypeDefinitionsTemplates.resolveUnion(f);
        }
        if (type in Models_1.Value) {
            return ValueTemplate_1.ValueTemplate.resolve(f);
        }
        if (type in Models_1.TypeExtension) {
            return TypeDefinitionsTemplates_1.TypeDefinitionsTemplates.resolveExtension(f);
        }
        if (type in Models_1.TypeDefinition) {
            return TypeDefinitionsTemplates_1.TypeDefinitionsTemplates.resolve(f);
        }
        switch (type) {
            case Models_1.TypeSystemDefinition.FieldDefinition:
                return FieldTemplate_1.FieldTemplate.resolve(f, prefix);
            case Models_1.TypeSystemDefinition.DirectiveDefinition:
                return TypeDefinitionsTemplates_1.TypeDefinitionsTemplates.resolveDirective(f);
            case Models_1.TypeSystemDefinition.UnionMemberDefinition:
                return UnionMemberTemplate_1.UnionMemberTemplate.resolve(f);
            case Models_1.ValueDefinition.EnumValueDefinition:
                return EnumValueDefinitionTemplate_1.EnumValueDefinitionTemplate.resolve(f);
            case Models_1.ValueDefinition.InputValueDefinition:
                return InputValueTemplate_1.InputValueTemplate.resolve(f, prefix);
            case Models_1.Helpers.Extend:
                return ExtendTemplate_1.ExtendTemplate.resolve(f);
            case Models_1.Helpers.Comment:
                return CommentTemplate_1.CommentTemplate.resolve(f);
            case Models_1.Instances.Argument:
                return ArgumentTemplate_1.ArgumentTemplate.resolve(f);
            case Models_1.Instances.Directive:
                return DirectiveTemplate_1.DirectiveTemplate.resolve(f);
            default:
                return '';
        }
    }
    return '';
};
